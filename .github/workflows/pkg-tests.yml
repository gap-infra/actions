name: "Run selected package tests"

on:
  workflow_dispatch:
    inputs:
      container:
        description: 'GHCR Docker image from gap-system'
        required: true
        type: string
        default: gap-docker-master
      packages:
        description: 'Packages to test (whitespace separated e.g. "digraphs semigroups"; leave blank to test all)'
        required: false
        type: string
  workflow_call:
    inputs:
      container:
        required: true
        type: string

jobs:
  extract:
    name: "Decide packages to test in ${{ github.event.inputs.container || inputs.container }}"
    runs-on: ubuntu-latest
    container: ghcr.io/gap-system/${{ github.event.inputs.container || inputs.container }}:master
    outputs:
      matrix: ${{ steps.get-names.outputs.matrix }}
      container: ghcr.io/gap-system/${{ github.event.inputs.container || inputs.container }}:master
      gap_build_version: ${{steps.get-build-version.outputs.version}}
    steps:
      - name: "Extract GAP_BUILD_VERSION"
        id: get-build-version
        run: |
          VERSION=$(awk '/GAP_BUILD_VERSION=/{ print $0 }' ${GAP_HOME}/sysinfo.gap | awk -F 'GAP_BUILD_VERSION="' '{print $2}' | awk -F '\"' '{print $1}')
          echo "::set-output name=version::$VERSION"

      - name: "Get the list of package names"
        id: get-names
        run: |
          if [ "${{ github.event.inputs.packages }}" = "" ]; then
            # Get the names of all packages with a TestFile in their PackageInfo
            # record, in lowercase
            PACKAGES=$(${GAP_HOME}/bin/gap.sh -A -b -q --quitonbreak <<EOF
            pis:=GAPInfo.PackagesInfo;;
            pkgs:=Filtered(RecNames(pis), x->IsBound(pis.(x)[1].TestFile));;
            for pkgname in SortedList(pkgs) do Print(pkgname,"\n"); od;
          EOF
            )
          else
            PACKAGES="${{ github.event.inputs.packages }}"
          fi
          MATRIX="{\"package\":["
          for PKG in ${PACKAGES}; do
            echo "${PKG}"
            MATRIX="${MATRIX}\"${PKG}\","
          done
          MATRIX="${MATRIX}]}"
          echo "::set-output name=matrix::$MATRIX"

  individual-package:
    name: "${{ matrix.package }}"
    needs: extract
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.extract.outputs.matrix) }}
    outputs:
      container : ${{needs.extract.outputs.container}}
      gap_build_version: ${{needs.extract.outputs.gap_build_version}}
    steps:
      - uses: actions/checkout@v2

      - run: docker pull ${{ needs.extract.outputs.container }}

      - name: "Run package tests with default packages loaded"
        timeout-minutes: 20
        run: >
          docker run
          -v $PWD:/home/workspace
          ${{ needs.extract.outputs.container }}
          /bin/sh -c "PKG_NAME=${{ matrix.package }} /home/workspace/pkg-tests.sh"

      - name: "Run package tests with minimal packages loaded"
        timeout-minutes: 20
        run: >
          docker run
          -v $PWD:/home/workspace
          ${{ needs.extract.outputs.container }}
          /bin/sh -c "PKG_NAME=${{ matrix.package }} /home/workspace/pkg-tests.sh -A"

      - name: "Get job status"
        id: job-status
        if: ${{ always() }}
        run: |
          PKG="${{ matrix.package }}"
          STATUS="${{ job.status }}"
          echo ${STATUS} > "${PKG}.txt"

      - name: "Upload job status"
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: ${{ matrix.package }}
          path: "${{ matrix.package }}.txt"

  report:
    name: "Report"
    needs: individual-package
    if: ${{ always() }}
    runs-on: ubuntu-18.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      CONTAINER: ${{ needs.individual-package.outputs.container }}
      VERSION: ${{ needs.individual-package.outputs.gap_build_version }}
    steps:
      - uses: actions/checkout@v2

      - name: "Create data and gh-pages worktree"
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}
          git fetch
          git branch --track data origin/data
          git worktree add data origin/data
          git branch --track gh-pages origin/gh-pages
          git worktree add gh-pages origin/gh-pages

      - name: "Download every job status"
        uses: actions/download-artifact@v2
        with:
          path: reports

      - name: "Set up Python 3.7"
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: "Generate report"
        id: report
        run: python pkg-report.py ${{ github.run_id }} ${CONTAINER} ${VERSION} $(git rev-parse --short "$GITHUB_SHA") ${GITHUB_REF#refs/heads/}

      - name: "Push report"
        id: push-report
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          cd data
          git add -A
          git commit -m "Automated report"
          git push origin HEAD:data
          cd ../gh-pages
          git add -A
          git commit -m "Update redirect"
          git push origin HEAD:gh-pages